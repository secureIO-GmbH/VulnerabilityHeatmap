import moment from "moment";

let dialog;
if (typeof document !== "undefined") {
  dialog = document.querySelector("dialog");
  const closeButton = document.querySelector("dialog button");

  // "Close" button closes the dialog
  closeButton.addEventListener("click", () => {
    dialog.close();
  });
}

function getRandomNumber(max) {
  return Math.round(Math.random() * (max - 1));
}

export function getLastDayOfWeek(weekStr) {
  const [weekString, year] = weekStr.split(" ");
  const weekNumber = weekString.replace("CW", "");

  // Get the current year and week number
  const today = moment();
  const currentYear = today.year();
  const currentWeekNumber = today.isoWeek();
  const isCurrentWeek =
    parseInt(year) === currentYear &&
    parseInt(weekNumber) === currentWeekNumber;
  if (isCurrentWeek) {
    return today;
  }

  const firstDayOfWeek = moment()
    .year(year)
    .isoWeek(weekNumber)
    .startOf("isoWeek");
  const lastDayOfWeek = firstDayOfWeek.clone().endOf("isoWeek");

  return lastDayOfWeek;
}

export const SCANNER_TYPES = {
  sast: "Kiuwan",
  sca: "KiuwanLibraries",
  container: "Trivy",
  tm: "IriusRisk",
  dast: "Acunetix WVS",
};

export const COLOR_RANGE = {
  info: "#00b050", // green
  low: "#92d050", // light green
  medium: "#ffff00", // yellow
  high: "#ff0000", // red
  critical: "#c00000", // dark red
};

export function logToUI(element, message) {
  element.innerHTML += message + "<br>";
}

export function filterScansByScannerType(scans, selectedScannerType) {
  return scans.filter(function (scan) {
    if (selectedScannerType && selectedScannerType !== "all") {
      if (selectedScannerType === "sast") {
        return (
          scan.scannerName === SCANNER_TYPES["sast"] ||
          scan.scannerName === SCANNER_TYPES["sca"]
        );
      }
      return scan.scannerName === SCANNER_TYPES[selectedScannerType];
    }

    // default:
    return (
      scan.scannerName === SCANNER_TYPES.sast ||
      scan.scannerName === SCANNER_TYPES.sca ||
      scan.scannerName === SCANNER_TYPES.container ||
      scan.scannerName === SCANNER_TYPES.tm ||
      scan.scannerName === SCANNER_TYPES.dast
    );
  });
}

// IMPORTANT, read this:
//  https://momentjscom.readthedocs.io/en/latest/moment/02-get-set/10-week/
// "The week of the year varies depending on which day is the first day of the
// week(Sunday, Monday, etc), and which week is the first week of the year"
export function isInCalendarWeek(timestamp, week, year) {
  const date = moment(timestamp);

  // console.log('date', date);
  // console.log('week', date.week());
  // console.log('year', date.year());

  const weekOfDate = date.week();
  const yearOfDate = date.year();

  return weekOfDate === week && yearOfDate === year;
}

export function getScansOfCalendarWeek(scans, calendarWeek, year) {
  return scans.filter((scan) => {
    return isInCalendarWeek(scan.importTime, calendarWeek, year);
  });
}

export const dialogObject = {
  open: function (html) {
    document.querySelector("dialog .dialog-content").innerHTML = html;
    dialog.showModal();
  },
  close: function () {
    dialog.close();
  },
};

function getScanDummy() {
  return {
    // 	numberClosedVulnerabilities: 0
    numberTotalVulnerabilities: 0,
    numberCriticalVulnerabilities: 0,
    numberHighVulnerabilities: 0,
    numberMediumVulnerabilities: 0,
    numberLowVulnerabilities: 0,
    numberInfoVulnerabilities: 0,
    findings: [],
    // 	numberNewVulnerabilities: 0
    // 	numberOldVulnerabilities: 0
    // 	numberRepeatFindings: 0
    // 	numberRepeatResults: 0
    // 	numberResurfacedVulnerabilities: 0
    // 	numberUnassignedVulnerabilities: 0
  };
}
/**
 * We want to have "historical" point of view of vulnerabilities over time.
 * To address this, an accurate historical view of vulnerabilities for each
 * scan type per calendar week, taking into account the findings from
 * previous scans, a cumulative approach is implemented. This approach
 * ensures that the current week's representation includes unresolved
 * vulnerabilities from previous weeks, providing a more realistic view of
 * the application's security posture over time.
 *
 * Also have a look at the unit tests to fully understand this function.
 */
export function normalizeScansForHistoricalView(scans, startDate, endDate) {
  // sort ascending by importTime
  scans.sort(function (a, b) {
    return a.importTime - b.importTime;
  });

  // first add data structure which holds scans per week in the whole range
  const scansPerWeek = {};

  const lastTimestamp = moment(endDate).unix();
  let timestamp = moment(startDate).unix();
  let weeksToAdd = 0;

  while (timestamp <= lastTimestamp) {
    const date = moment(startDate).add(weeksToAdd, "weeks");
    timestamp = date.unix();
    weeksToAdd++;

    const str = "CW" + date.week() + " " + date.year();
    scansPerWeek[str] = {
      // this array will hold all scans happened in this week
      scans: [],

      // this array will hold ONLY the LATEST scans in a current week, ex:
      // w1: trivy1, sast1, sast2, sast3 -> [trivy1, sast3]
      // w2: [] -> [trivy1, sast3]
      // w3: [sast4] -> [trivy1, sast4]
      // usw...
      latestScansPerTypeInThisWeek: {},

      // for each week we want to have simple stats per type
      sumTotal: 0,
      sumCritical: 0,
      sumHigh: 0,
      sumMedium: 0,
      sumLow: 0,
      sumInfo: 0,

      sast: 0,
      container: 0,
      // tm: 0,
      // dast: 0,
    };
  }

  // filter the scans by calendar week
  for (const scan of scans) {
    scan.date = moment(scan.importTime);
    const weekOfDate = scan.date.week();
    const yearOfDate = scan.date.year();
    const str = "CW" + weekOfDate + " " + yearOfDate;

    // if we have scans which are not in the user selected date range, ignore them:
    if (!scansPerWeek[str]) {
      continue;
    }

    scansPerWeek[str].scans.push(scan);
  }

  // then get the latest scan per scanner type in a week.
  // if there is none, use the data from the last week.
  let latestScansPerTypeFromLastWeek = null;
  for (const [weekStr, obj] of Object.entries(scansPerWeek)) {
    const scansInWeek = obj.scans;

    let latestScansPerType = {};
    latestScansPerType[SCANNER_TYPES.sast] = getScanDummy();
    latestScansPerType[SCANNER_TYPES.sca] = getScanDummy();
    latestScansPerType[SCANNER_TYPES.container] = getScanDummy();
    latestScansPerType[SCANNER_TYPES.tm] = getScanDummy();

    // use data from last week
    if (latestScansPerTypeFromLastWeek) {
      latestScansPerType = latestScansPerTypeFromLastWeek;
    }

    // what we also want is smt like "findings per scanner type" of current weekdays.
    // ex: if there are no trivy findings this week, maybe there are from last(s)!!!
    // then we can always just check latestFindings.each and see if there is at LEAST ONE critical sla violation for example, this is enough to make it red

    // For each "group", count the *** number of findings with SLA violations *** (where sla_days_remaining is negative or sla_expiration_date has passed).

    // > 3 ? dark red
    // einfach mal als beispiel und dann meeting morgen!

    // Question:
    // die frage ist: welcher? was wenn ein finding in time und ein anderes More than 5 days past SLA!??!?!?!

    // - In time (30-10 days to SLA) -> green
    //   - Prewarning (10 days to SLA) -> light green
    //   - Prewarning (5 days to SLA) -> yellow
    //   - Past SLA -> red
    //   - More than 5 days past SLA -> dark red

    // This is interesting when looking at *one* finding. In a certain calendar week, we may have endDate.g. 50 kiuwan and 50 trivy findings, some in time, some may are Past SLA. You write: "We would take into account the vulnerability with the worst SLA for the calculation.

    // TODO: add function ignoreFinding() -> duplicate,risk_accepted etc!
    for (const scan of scansInWeek) {
      scan.date = moment(scan.importTime);
      latestScansPerType[scan.scannerName] = scan;
    }

    let sumTotal = 0,
      sumCritical = 0,
      sumHigh = 0,
      sumMedium = 0,
      sumLow = 0,
      sumInfo = 0,
      sast = 0,
      container = 0,
      tm = 0;

    // eslint-disable-next-line no-unused-vars
    for (const [scannerName, scan] of Object.entries(latestScansPerType)) {
      sumTotal += scan.numberTotalVulnerabilities;
      sumCritical += scan.numberCriticalVulnerabilities;
      sumHigh += scan.numberHighVulnerabilities;
      sumMedium += scan.numberMediumVulnerabilities;
      sumLow += scan.numberLowVulnerabilities;
      sumInfo += scan.numberInfoVulnerabilities;

      if (scan.scannerName === SCANNER_TYPES.container) {
        container += scan.numberTotalVulnerabilities;
      }
      if (
        scan.scannerName === SCANNER_TYPES.sast ||
        scan.scannerName === SCANNER_TYPES.sca
      ) {
        sast += scan.numberTotalVulnerabilities;
      } else if (scan.scannerName === SCANNER_TYPES.tm) {
        tm += scan.numberTotalVulnerabilities;
      }
    }
    scansPerWeek[weekStr].sumTotal = sumTotal;
    scansPerWeek[weekStr].sumCritical = sumCritical;
    scansPerWeek[weekStr].sumHigh = sumHigh;
    scansPerWeek[weekStr].sumMedium = sumMedium;
    scansPerWeek[weekStr].sumLow = sumLow;
    scansPerWeek[weekStr].sumInfo = sumInfo;
    scansPerWeek[weekStr].sast = sast;
    scansPerWeek[weekStr].container = container;
    scansPerWeek[weekStr].tm = tm;

		// always store the latest scans per type of this week:
		scansPerWeek[weekStr].latestScansPerTypeInThisWeek = Object.assign({}, latestScansPerType);

    // remember last week's scans
    latestScansPerTypeFromLastWeek = latestScansPerType;
  }

  // console.log(scansPerWeek);

  return scansPerWeek;
}

/**
 * Calculates the y-value for the heatmap of a calendar week,
 * based on all scans and their findings happened in this week.
 *
 * See "colorScale" in main.js
 */
export function calculateSLAColorForWeek(scansOfCurrentWeek) {
  const slaLookup = {
    // critical rows
    0: {
      // zero critical vulns
      // high columns:
      0: 0,
      ">=45": 0,
      "15-45": 1,
      "1-15": 2,
      "<=0": 3,
      "<= -15": 4,
    },
    ">=10": {
      // high columns:
      0: 0,
      ">=45": 0,
      "15-45": 1,
      "1-15": 2,
      "<=0": 3,
      "<= -15": 4,
    },
    ">0 && <10": {
      // high columns:
      0: 1,
      ">=45": 1,
      "15-45": 1,
      "1-15": 2,
      "<=0": 3,
      "<= -15": 4,
    },
    ">0 && <=5": {
      // high columns:
      0: 2,
      ">=45": 2,
      "15-45": 2,
      "1-15": 2,
      "<=0": 3,
      "<= -15": 4,
    },
    "<0 && > -5": {
      // high columns:
      0: 3,
      ">=45": 3,
      "15-45": 3,
      "1-15": 3,
      "<=0": 4,
      "<= -15": 4,
    },
    "< -5": {
      // high columns:
      0: 4,
      ">=45": 4,
      "15-45": 4,
      "1-15": 4,
      "<=0": 4,
      "<= -15": 4,
    },
  };

  // first find the worst sla for high and critical (i.e. smallest "sla_days_remaining")
  let worstHighFinding, worstCriticalFinding;

  for (const scanOfCurrentWeek of scansOfCurrentWeek) {
    const filteredFindings = scanOfCurrentWeek.findings.filter((f) => {
      return f.severity === "High" || f.severity === "Critical";
    });
    for (const finding of filteredFindings) {
      if (!worstHighFinding && finding.severity === "High") {
        worstHighFinding = finding;
      } else if (!worstCriticalFinding && finding.severity === "Critical") {
        worstCriticalFinding = finding;
      }

      if (
        finding.severity === "High" &&
        finding.sla_days_remaining < worstHighFinding.sla_days_remaining
      ) {
        worstHighFinding = finding;
      }

      if (
        finding.severity === "Critical" &&
        finding.sla_days_remaining < worstCriticalFinding.sla_days_remaining
      ) {
        worstCriticalFinding = finding;
      }
    }
  }

  if (!worstHighFinding && !worstCriticalFinding) {
    return 0;
  }

  function getColorCode(worstCriticalFinding, worstHighFinding) {
    let criticalSla = worstCriticalFinding
      ? worstCriticalFinding.sla_days_remaining
      : null;
    let highSla = worstHighFinding ? worstHighFinding.sla_days_remaining : null;
    let criticalKey = null;
    let highKey = null;

    if (criticalSla === null) {
      criticalKey = 0;
    } else if (criticalSla >= 10) {
      criticalKey = ">=10";
    } else if (criticalSla >= 5) {
      criticalKey = ">0 && <10";
    } else if (criticalSla >= 0) {
      criticalKey = ">0 && <=5";
    } else if (criticalSla > -5 && criticalSla < 0) {
      criticalKey = "<0 && > -5";
    } else if (criticalSla <= -5) {
      criticalKey = "< -5";
    }

    if (highSla === null) {
      highKey = 0;
    } else if (highSla >= 45) {
      highKey = ">=45";
    } else if (highSla >= 15) {
      highKey = "15-45";
    } else if (highSla >= 1) {
      highKey = "1-15";
    } else if (highSla <= 0 && highSla > -15) {
      highKey = "<=0";
    } else if (highSla <= -15) {
      highKey = "<= -15";
    }

    // console.log(worstCriticalFinding, criticalKey, highKey);
    return slaLookup[criticalKey][highKey];
  }

  const colorCode = getColorCode(worstCriticalFinding, worstHighFinding);
  return colorCode;
}

/**
 * We need some random data for demo.
 */
export function generateRandomDataForDemo() {
  const apps = [
    { name: "App1", scans: [] },
    { name: "App2", scans: [] },
    { name: "App3", scans: [] },
    { name: "App4", scans: [] },
    { name: "App5", scans: [] },
    { name: "App6", scans: [] },
  ];

  const START_DATE = "2024-01-03 18:06:03";
  // const END_DATE = "2024-06-10 18:06:03";

  function getRandomScannerName() {
    const num = getRandomNumber(2);
    if (num === 0) {
      return "Trivy";
    } else {
      return "Kiuwan";
    }
  }

  function getRandomSeverity() {
    const num = getRandomNumber(4);
    const sevs = ["Critical", "High", "Medium", "Low"];
    return sevs[num];
  }

  function getRandomExpireDate(date) {
    const theDate = date.clone();
    // either date + 90, date + 30, date +5, date -1, date -30
    const num = getRandomNumber(5);
    const nums = [90, 30, 5, -1, -33];
    return theDate.add(nums[num], "days").format("YYYY-MM-DD");
  }

  for (const app of apps) {
    let ADD_DAYS = 0;
    const numScans = getRandomNumber(500);

    for (let i = 0; i < numScans; i++) {
      const date = moment(
        moment(START_DATE).add(ADD_DAYS, "days").format("YYYY-MM-DD"),
      );
      ADD_DAYS += 3;

      const scan = {
        date: date,
        importTime: date.unix() * 1000,
        scannerName: getRandomScannerName(),
        findings: [],
      };

      let numFindings = getRandomNumber(10);
      const tmp = getRandomNumber(2);
      if (tmp === 1) {
        numFindings = 0; // it should be 0 findings more often
      }

      for (let j = 0; j < numFindings; j++) {
        const exp = getRandomExpireDate(date);
        const differenceInDays = moment(exp).diff(moment(date), "days");

        scan.findings.push({
          severity: getRandomSeverity(),
          sla_expiration_date: exp,
          sla_days_remaining: differenceInDays,
        });
      }

      // count sums
      scan.numberTotalVulnerabilities = scan.findings.length;
      scan.numberCriticalVulnerabilities = scan.findings.filter(
        (f) => f.severity === "Critical",
      ).length;
      scan.numberHighVulnerabilities = scan.findings.filter(
        (f) => f.severity === "High",
      ).length;
      scan.numberMediumVulnerabilities = scan.findings.filter(
        (f) => f.severity === "Medium",
      ).length;
      scan.numberLowVulnerabilities = scan.findings.filter(
        (f) => f.severity === "Low",
      ).length;
      scan.numberInfoVulnerabilities = scan.findings.filter(
        (f) => f.severity === "Info",
      ).length;

      app.scans.push(scan);
    }
  }

  return apps;
}
