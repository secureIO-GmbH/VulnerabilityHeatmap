import moment from "moment";

let dialog;
if (typeof document !== "undefined") {
  dialog = document.querySelector("dialog");
  const closeButton = document.querySelector("dialog button");

  // "Close" button closes the dialog
  closeButton.addEventListener("click", () => {
    dialog.close();
  });
}

export function logToUI(element, message) {
  element.innerHTML += message + "<br>";
}

export function filterScansOfWeek(scansOfCurrentWeek) {
  return scansOfCurrentWeek.filter(function (scan) {
    return (
      scan.scannerName === "Kiuwan" ||
      scan.scannerName === "KiuwanLibraries" ||
      scan.scannerName === "Trivy"
    );
  });
}

// IMPORTANT, read this:
//  https://momentjscom.readthedocs.io/en/latest/moment/02-get-set/10-week/
// "The week of the year varies depending on which day is the first day of the
// week(Sunday, Monday, etc), and which week is the first week of the year"
export function isInCalendarWeek(timestamp, week, year) {
  const date = moment(timestamp);

  // console.log('date', date);
  // console.log('week', date.week());
  // console.log('year', date.year());

  const weekOfDate = date.week();
  const yearOfDate = date.year();

  return weekOfDate === week && yearOfDate === year;
}

export function getScansOfCalendarWeek(scans, calendarWeek, year) {
  return scans.filter((scan) => {
    return isInCalendarWeek(scan.importTime, calendarWeek, year);
  });
}

export const dialogObject = {
  open: function (html) {
    document.querySelector("dialog .dialog-content").innerHTML = html;
    dialog.showModal();
  },
  close: function () {
    dialog.close();
  },
};
export function normalizeScansForHistoricalView(scans) {
  // sort ascending by importTime
  scans.sort(function (a, b) {
    return a.importTime - b.importTime;
  });

  // first add data structure which holds scans in a week
  const scansPerWeek = {};

  for (const scan of scans) {
    const date = moment(scan.importTime);
    scan.date = date;
    const weekOfDate = date.week();
    const yearOfDate = date.year();
    const str = "CW" + weekOfDate + " " + yearOfDate;

    if (!scansPerWeek[str]) {
      scansPerWeek[str] = [];
    }
    scansPerWeek[str].push(scan);
  }

  // console.log(scansPerWeek);

  const latestScansPerType = {
    Trivy: null,
    Kiuwan: null,
    KiuwanLibraries: null,
  };

  console.log("// TODO: review UND UNIT - TEST!!!");
  // TODO: read chatgpt output

  // then get the latest scan per scanner type in a week. if there is none, it counts from last week!
  for (const [weekStr, scansInWeek] of Object.entries(scansPerWeek)) {
    for (const scan of scansInWeek) {
      // nun noch in der week!
      // also diese logik immer mit allen scans innerhalb einer week
      if (scan.scannerName === "Trivy") {
        scan.date = moment(scan.importTime);
        latestScansPerType["Trivy"] = scan;
      }
    }

    scansPerWeek[weekStr].latestScansPerType = latestScansPerType;
  }

  console.log(scansPerWeek);

  return scansPerWeek;
}
