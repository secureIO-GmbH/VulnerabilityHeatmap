import axios from "axios";
import moment from "moment";
import { KIUWAN_API_KEY } from "../config.js";

/**
 * Normalize Kiuwan data structure into unified one.
 */
export async function fetchDataFromKiuwan(appName, startDateTS, endDateTS) {
  const KIUWAN_API_URL = "https://api.kiuwan.com/";
  const startDate =
    moment(parseInt(startDateTS)).format("YYYY-MM-DD") + "T00%3A00%3A00Z";
  const endDate =
    moment(parseInt(endDateTS)).format("YYYY-MM-DD") + "T23%3A59%3A59Z";

  const axiosConfig = {
    mode: "no-cors",
    headers: {
      Authorization: "Basic " + KIUWAN_API_KEY,
    },
  };

  // TODO: all apps sync!!! checken wie wir das lÃ¶sen... alle ist zu viel!
  // const response = await axios.get(
  //   KIUWAN_API_URL + "applications",
  //   axiosConfig
  // );
  // const apps = response.data;
  const apps = [
    {
      name: appName,
      scans: [],
    },
  ];
  // console.log(apps);
  // for (const app of apps) {
  //   app.scans = [];
  // }
  // return apps;

  let url = `${KIUWAN_API_URL}analysis/list?applicationName=${appName}&endDate=${endDate}&initDate=${startDate}&count=100&status=SUCCESS`;

  // apps: https://api.kiuwan.com/applications
  // fetch scans in a range: https://api.kiuwan.com/analysis/list?applicationName=' + 'Taro-U-299'
  let scansFetched = await axios.get(url + "&page=1", axiosConfig);
  let scans = [];
  let i = 2;
  while (scansFetched.data && scansFetched.data.length > 0) {
    console.log("fetching " + scans.length);
    scans = scans.concat(scansFetched.data);

    scansFetched = await axios.get(url + "&page=" + i++, axiosConfig);
  }

  for (const scan of scans) {
    let urlExport = `https://api.kiuwan.com/applications/analysis/vulnerabilities/export?application=${appName}&code=${scan.code}&type=Threadfix`;
    let resp = await axios.get(urlExport, axiosConfig);
    let scanFetched = resp.data;

    scan.importTime = moment(scan.creationDate).unix() * 1000;
    scan.scannerName = "Kiuwan";
    // TODO: more! findings!
    scan.numberTotalVulnerabilities = scanFetched.findings.length; //TODO
    scan.findings = scanFetched.findings;
  }

  apps[0].scans = scans;

  // for (const scan of scans) {
  //   // fetch additional infos to an anylisis: /apps/analysis/A-7e3-16dc9e29131
  //   // gets: label (e.g. feature-abt-mfe-postgres), languages, Vulnerabilities (amount)

  //   scan.importTime = (moment(scan.creationDate).unix() * 1000).toString();

  //   // GET /apps/analysis/{code}/defects
  //   // gets details about the findings incl an ID!
  //   const defectsFetched = await axios.get(
  //     `${KIUWAN_API_URL}apps/analysis/${scan.code}/defects?muted=false`,
  //     axiosConfig
  //   );
  //   scan.findings = defectsFetched.data;
  // }

  return apps;

  // callback(null, scans);

  // fetch SAST GET https://api.kiuwan.com/applications/analysis/vulnerabilities/export?application=
  // fetch SCA: GET https://api.kiuwan.com/insights/analysis/security

  // TODO: entweder so und csv oder das TF format
  // axios
  //   .get(
  //     "https://api.kiuwan.com/applications/analysis/vulnerabilities/export?application=Taro-U-299&code=A-7e5-17d74c5948c&type=Threadfix",
  //     axiosConfig,
  //   )
  //   .then(function (response) {
  //     callback(null, response.data);
  //   })
  //   .catch(function (error) {
  //     callback(error);
  //   });
}
export function normalize(kiuwanAppsResponse) {
  return kiuwanAppsResponse;
}
